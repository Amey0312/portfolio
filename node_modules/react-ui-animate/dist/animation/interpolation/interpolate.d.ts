import { FluidValue } from '@raidipesh78/re-motion';
type ExtrapolateType = 'identity' | 'extend' | 'clamp';
type ExtrapolateConfig = {
    extrapolate?: ExtrapolateType;
    extrapolateLeft?: ExtrapolateType;
    extrapolateRight?: ExtrapolateType;
};
type InterpolateReturnType<T> = T extends number ? number : ReturnType<FluidValue['interpolate']>;
export declare const interpolate: <T extends number | FluidValue>(value: T, inputRange: number[], outputRange: number[] | string[], extrapolateConfig?: ExtrapolateConfig) => InterpolateReturnType<T>;
export declare const bInterpolate: <T extends number | FluidValue>(value: T, minOutput: number | string, maxOutput: number | string, extrapolateConfig?: ExtrapolateConfig) => InterpolateReturnType<T>;
export {};
