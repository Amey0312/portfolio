import { EndResultType, FluidAnimation } from '../animations/FluidAnimation';
import { ExtrapolateConfig } from '../interpolation/Interpolation';
import { FluidInterpolation } from './FluidInterpolation';
import { FluidSubscriptions } from './FluidSubscriptions';
import { Fluid } from './Fluid';
export declare class FluidValue extends FluidSubscriptions {
    private value;
    private startingValue;
    private animation;
    private track;
    private listeners;
    constructor(value: number | string);
    private updateValue;
    get(): string | number;
    detach(): void;
    stopAnimation(callback?: ((value: number | string) => void) | null): void;
    resetAnimation(callback?: (value: number) => void | null): void;
    animate(animation: FluidAnimation, callback?: (value: EndResultType) => void, handlers?: {
        onStart?: (value: number | string) => void;
        onChange?: (value: number | string) => void;
        onRest?: (value: number | string) => void;
    }): void;
    interpolate(inputRange: Array<number>, outputRange: Array<string | number>, extrapolateConfig?: ExtrapolateConfig): FluidInterpolation;
    startTrack(track: Fluid): void;
    stopTrack(): void;
    addListener(callback: (value: number) => void): string;
    removeListener(id: string): void;
    removeAllListeners(): void;
}
